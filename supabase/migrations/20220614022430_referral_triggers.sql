-- This script was generated by the Schema Diff utility in pgAdmin 4
-- For the circular dependencies, the order in which Schema Diff writes the objects is not very sophisticated
-- and may require manual changes to the script to ensure changes are applied in the correct order.
-- Please report an issue for any failure with the reproduction steps.

CREATE OR REPLACE FUNCTION public.handle_new_referral()
    RETURNS trigger
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE NOT LEAKPROOF SECURITY DEFINER
    SET search_path=public
AS $BODY$
begin
    with profiles_emails as (
        select 
            user_id,
            email 
        from profile
        inner join auth.users 
        on auth.users.id = profile.user_id
    )
    -- use with cluase?
    update referral 
    set 
        (candidate_id, referral_status_id) = (
            -- only set candidate_id if profile is setup
            select 
                profiles_emails.user_id,
                CASE
                    WHEN profiles_emails.user_id IS NULL THEN 1
                    ELSE 2
                END
            from referral
            left join profiles_emails
            on profiles_emails.email = referral.candidate_email
            where referral_id = new.referral_id
        )
    where referral_id = new.referral_id;
    return new;
end;
$BODY$;

ALTER FUNCTION public.handle_new_referral()
    OWNER TO postgres;

GRANT EXECUTE ON FUNCTION public.handle_new_referral() TO authenticated;

GRANT EXECUTE ON FUNCTION public.handle_new_referral() TO postgres;

GRANT EXECUTE ON FUNCTION public.handle_new_referral() TO PUBLIC;

GRANT EXECUTE ON FUNCTION public.handle_new_referral() TO anon;

GRANT EXECUTE ON FUNCTION public.handle_new_referral() TO service_role;

CREATE OR REPLACE FUNCTION public.update_referral_on_new_profile()
    RETURNS trigger
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE NOT LEAKPROOF SECURITY DEFINER
    SET search_path=public
AS $BODY$
begin
    update referral 
    set 
        candidate_id = new.user_id,
        referral_status_id = 2
    from auth.users
    where auth.users.id = new.user_id 
    and referral.candidate_email = auth.users.email
    and auth.users.id  = new.user_id;
    return new;
end;
$BODY$;

ALTER FUNCTION public.update_referral_on_new_profile()
    OWNER TO postgres;

GRANT EXECUTE ON FUNCTION public.update_referral_on_new_profile() TO authenticated;

GRANT EXECUTE ON FUNCTION public.update_referral_on_new_profile() TO postgres;

GRANT EXECUTE ON FUNCTION public.update_referral_on_new_profile() TO PUBLIC;

GRANT EXECUTE ON FUNCTION public.update_referral_on_new_profile() TO anon;

GRANT EXECUTE ON FUNCTION public.update_referral_on_new_profile() TO service_role;

CREATE TRIGGER on_new_referral
    AFTER INSERT
    ON public.referral
    FOR EACH ROW
    EXECUTE FUNCTION public.handle_new_referral();

CREATE TRIGGER on_new_profile
    AFTER INSERT
    ON public.profile
    FOR EACH ROW
    EXECUTE FUNCTION public.update_referral_on_new_profile();
